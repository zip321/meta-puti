From 80d996f402a03da8bb6bdcb806ff9fc8163ba77c Mon Sep 17 00:00:00 2001
From: Zheng Song <zheng.song@intel.com>
Date: Mon, 30 May 2022 17:00:04 +0800
Subject: [PATCH] Adapt x86 power control to Puti paltform

Puti platform uses a CPLD to monitor and control power control pins
instead of using BMC to manipulate relevant GPIO directly.
This commit fills the gap. Adapt the x86 power control to the CPLD
interfaces.

---
 config/power-config-host0.json | 104 +++++----
 src/power_control.cpp          | 389 +++++++++++++++++++++++++--------
 2 files changed, 360 insertions(+), 133 deletions(-)

diff --git a/config/power-config-host0.json b/config/power-config-host0.json
index 12c3309..7f428c2 100644
--- a/config/power-config-host0.json
+++ b/config/power-config-host0.json
@@ -2,75 +2,89 @@
   "gpio_configs":[
     {
         "Name" : "IdButton",
-        "LineName" : "ID_BUTTON",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
-    },
-    {
-        "Name" : "NMIButton",
-        "LineName" : "NMI_BUTTON",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Type" : "DBUS_ONE_WAY_SIGNAL",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_events",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformEvents",
+        "Property" : "UidButton"
     },
     {
         "Name" : "NMIOut",
-        "LineName" : "NMI_OUT",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveHigh"
+        "Type" : "DBUS_METHOD",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_controls",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformControls",
+        "Property" : "BmcNmiCtrl"
     },
     {
         "Name" : "PostComplete",
-        "LineName" : "POST_COMPLETE",
+        "LineName" : "FM_BIOS_POST_CMPLT_BMC_N",
         "Type" : "GPIO",
         "Polarity" : "ActiveLow"
     },
     {
-        "Name" : "PowerButton",
-        "LineName" : "POWER_BUTTON",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Name" : "powerButtonShortPressedForOn",
+        "Type" : "DBUS_ONE_WAY_SIGNAL",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_events",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformEvents",
+        "Property" : "ShortBtnPowerOn"
     },
     {
-        "Name" : "PowerOk",
-        "LineName" : "PS_PWROK",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveHigh"
+        "Name" : "powerButtonLongPressedForOff",
+        "Type" : "DBUS_ONE_WAY_SIGNAL",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_events",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformEvents",
+        "Property" : "LongBtnPowerDown"
     },
     {
-        "Name" : "PowerOut",
-        "LineName" : "POWER_OUT",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Name" : "PowerOk",
+        "Type" : "DBUS",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_states",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformStates",
+        "Property" : "PowerOk"
     },
     {
-        "Name" : "ResetButton",
-        "LineName" : "RESET_BUTTON",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Name" : "ShortBtnPowerDownCtrl",
+        "Type" : "DBUS_METHOD",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_controls",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformControls",
+        "Property" : "ShortBtnPowerDownCtrl"
     },
     {
-        "Name" : "ResetOut",
-        "LineName" : "RESET_OUT",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Name" : "LongBtnPowerDownCtrl",
+        "Type" : "DBUS_METHOD",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_controls",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformControls",
+        "Property" : "LongBtnPowerDownCtrl"
     },
     {
-        "Name" : "SioOnControl",
-        "LineName" : "SIO_ONCONTROL",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Name" : "ShortBtnPowerOnCtrl",
+        "Type" : "DBUS_METHOD",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_controls",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformControls",
+        "Property" : "ShortBtnPowerOnCtrl"
     },
     {
-        "Name" : "SioPowerGood",
-        "LineName" : "SIO_POWER_GOOD",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveHigh"
+        "Name" : "ResetButton",
+        "Type" : "DBUS_ONE_WAY_SIGNAL",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_events",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformEvents",
+        "Property" : "ShortBtnReset"
     },
     {
-        "Name" : "SIOS5",
-        "LineName" : "SIO_S5",
-        "Type" : "GPIO",
-        "Polarity" : "ActiveLow"
+        "Name" : "ResetCtrl",
+        "Type" : "DBUS_METHOD",
+        "DbusName" : "xyz.openbmc_project.Cpld",
+        "Path" : "/xyz/openbmc_project/cpld/platform_controls",
+        "Interface" : "xyz.openbmc_project.Cpld.PlatformControls",
+        "Property" : "ResetCtrl"
     }
 ],
   "timing_configs":{
diff --git a/src/power_control.cpp b/src/power_control.cpp
index f5e1c95..b537100 100644
--- a/src/power_control.cpp
+++ b/src/power_control.cpp
@@ -53,7 +53,9 @@ boost::container::flat_map<DbusConfigType, std::string> dbusParams = {
 enum class ConfigType
 {
     GPIO = 1,
-    DBUS
+    DBUS,                   // includes 2 direction signals
+    DBUS_ONE_WAY_SIGNAL,    // only assert signal
+    DBUS_METHOD             // for outputs only
 };
 
 struct ConfigData
@@ -68,14 +70,20 @@ struct ConfigData
 };
 
 static ConfigData powerOutConfig;
+static ConfigData shortBtnPowerDownCtrlConfig;
+static ConfigData longBtnPowerDownCtrlConfig;
+static ConfigData shortBtnPowerOnCtrlConfig;
 static ConfigData powerOkConfig;
 static ConfigData resetOutConfig;
+static ConfigData resetCtrlConfig;
 static ConfigData nmiOutConfig;
 static ConfigData sioPwrGoodConfig;
 static ConfigData sioOnControlConfig;
 static ConfigData sioS5Config;
 static ConfigData postCompleteConfig;
 static ConfigData powerButtonConfig;
+static ConfigData powerButtonShortPressedForOnConfig;
+static ConfigData powerButtonLongPressedForOffConfig;
 static ConfigData resetButtonConfig;
 static ConfigData idButtonConfig;
 static ConfigData nmiButtonConfig;
@@ -85,14 +93,20 @@ static ConfigData slotPowerConfig;
 // power control json config
 boost::container::flat_map<std::string, ConfigData*> powerSignalMap = {
     {"PowerOut", &powerOutConfig},
+    {"ShortBtnPowerDownCtrl", &shortBtnPowerDownCtrlConfig},
+    {"LongBtnPowerDownCtrl", &longBtnPowerDownCtrlConfig},
+    {"ShortBtnPowerOnCtrl", &shortBtnPowerOnCtrlConfig},
     {"PowerOk", &powerOkConfig},
     {"ResetOut", &resetOutConfig},
+    {"ResetCtrl", &resetCtrlConfig},
     {"NMIOut", &nmiOutConfig},
     {"SioPowerGood", &sioPwrGoodConfig},
     {"SioOnControl", &sioOnControlConfig},
     {"SIOS5", &sioS5Config},
     {"PostComplete", &postCompleteConfig},
     {"PowerButton", &powerButtonConfig},
+    {"powerButtonShortPressedForOn", &powerButtonShortPressedForOnConfig},
+    {"powerButtonLongPressedForOff", &powerButtonLongPressedForOffConfig},
     {"ResetButton", &resetButtonConfig},
     {"IdButton", &idButtonConfig},
     {"NMIButton", &nmiButtonConfig},
@@ -283,6 +297,8 @@ enum class Event
     postCompleteAssert,
     postCompleteDeAssert,
     powerButtonPressed,
+    powerButtonShortPressedForOn,
+    powerButtonLongPressedForOff,
     resetButtonPressed,
     powerCycleTimerExpired,
     psPowerOKWatchdogTimerExpired,
@@ -333,6 +349,12 @@ static std::string getEventName(Event event)
         case Event::powerButtonPressed:
             return "power button pressed";
             break;
+        case Event::powerButtonShortPressedForOn:
+            return "power button short pressed for power on";
+            break;
+        case Event::powerButtonLongPressedForOff:
+            return "power button long pressed for power off";
+            break;
         case Event::resetButtonPressed:
             return "reset button pressed";
             break;
@@ -1234,8 +1256,37 @@ static int assertGPIOForMs(const ConfigData& config, const int durationMs)
     return setGPIOOutputForMs(config, config.polarity, durationMs);
 }
 
+static void dbusGPIOMethodCall(ConfigData cfg)
+{
+    if (cfg.type == ConfigType::DBUS_METHOD)
+    {
+        conn->async_method_call(
+            [&](boost::system::error_code ec) {
+                if (ec)
+                {
+                    std::string logMsg = "failed to do " + cfg.lineName;
+                    phosphor::logging::log<phosphor::logging::level::INFO>(
+                        logMsg.c_str());
+                }
+            },
+            cfg.dbusName, cfg.path,
+            cfg.interface, cfg.lineName);
+    }
+    else
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "error calling to dbusGPIOMethodCall");
+    }
+}
+
 static void powerOn()
 {
+    if (!shortBtnPowerOnCtrlConfig.lineName.empty())
+    {
+        dbusGPIOMethodCall(shortBtnPowerOnCtrlConfig);
+        return;
+    }
+
     assertGPIOForMs(powerOutConfig, TimerMap["PowerPulseMs"]);
 }
 #ifdef CHASSIS_SYSTEM_RESET
@@ -1322,11 +1373,22 @@ static void slotPowerCycle()
 #endif
 static void gracefulPowerOff()
 {
+    if (!shortBtnPowerDownCtrlConfig.lineName.empty())
+    {
+        dbusGPIOMethodCall(shortBtnPowerDownCtrlConfig);
+        return;
+    }
     assertGPIOForMs(powerOutConfig, TimerMap["PowerPulseMs"]);
 }
 
 static void forcePowerOff()
 {
+    if (!longBtnPowerDownCtrlConfig.lineName.empty())
+    {
+        dbusGPIOMethodCall(longBtnPowerDownCtrlConfig);
+        return;
+    }
+
     if (assertGPIOForMs(powerOutConfig, TimerMap["ForceOffPulseMs"]) < 0)
     {
         return;
@@ -1355,6 +1417,11 @@ static void forcePowerOff()
 
 static void reset()
 {
+    if (!resetCtrlConfig.lineName.empty())
+    {
+        dbusGPIOMethodCall(resetCtrlConfig);
+        return;
+    }
     assertGPIOForMs(resetOutConfig, TimerMap["ResetPulseMs"]);
 }
 
@@ -1689,6 +1756,9 @@ static void powerStateOn(const Event event)
             setPowerState(PowerState::gracefulTransitionToOff);
             gracefulPowerOffTimerStart();
             break;
+        case Event::powerButtonLongPressedForOff:
+            setPowerState(PowerState::transitionToOff);
+            break;
         case Event::powerOffRequest:
             setPowerState(PowerState::transitionToOff);
             forcePowerOff();
@@ -1794,6 +1864,7 @@ static void powerStateOff(const Event event)
         case Event::sioS5DeAssert:
             setPowerState(PowerState::waitForPSPowerOK);
             break;
+        case Event::powerButtonShortPressedForOn:
         case Event::powerButtonPressed:
             psPowerOKWatchdogTimerStart();
             setPowerState(PowerState::waitForPSPowerOK);
@@ -1839,6 +1910,9 @@ static void powerStateGracefulTransitionToOff(const Event event)
         case Event::gracefulPowerOffTimerExpired:
             setPowerState(PowerState::on);
             break;
+        case Event::powerButtonLongPressedForOff:
+            setPowerState(PowerState::transitionToOff);
+            break;
         case Event::powerOffRequest:
             gracefulPowerOffTimer.cancel();
             setPowerState(PowerState::transitionToOff);
@@ -1884,6 +1958,7 @@ static void powerStateCycleOff(const Event event)
             powerCycleTimer.cancel();
             setPowerState(PowerState::waitForPSPowerOK);
             break;
+        case Event::powerButtonShortPressedForOn:
         case Event::powerButtonPressed:
             powerCycleTimer.cancel();
             psPowerOKWatchdogTimerStart();
@@ -2006,6 +2081,39 @@ static void sioS5Handler(bool state)
     sendPowerControlEvent(powerControlEvent);
 }
 
+static void powerButtonShortPressedForOnHandler(bool state)
+{
+    powerButtonIface->set_property("ButtonPressed", true);
+    powerButtonIface->set_property("ButtonPressed", false);
+    phosphor::logging::log<phosphor::logging::level::INFO>(
+        "powerButtonShortPressedOnHandler");
+    powerButtonPressLog();
+    sendPowerControlEvent(Event::powerButtonShortPressedForOn);
+    addRestartCause(RestartCause::powerButton);
+}
+
+static void powerButtonLongPressedForOffHandler(bool state)
+{
+    powerButtonIface->set_property("ButtonPressed", true);
+    powerButtonIface->set_property("ButtonPressed", false);
+    phosphor::logging::log<phosphor::logging::level::INFO>(
+        "powerButtonLongPressedForOffHandler");
+    powerButtonPressLog();
+    sendPowerControlEvent(Event::powerButtonLongPressedForOff);
+}
+
+static void powerButtonShortPressedForResetHandler(bool state)
+{
+    resetButtonIface->set_property("ButtonPressed", true);
+    resetButtonIface->set_property("ButtonPressed", false);
+    phosphor::logging::log<phosphor::logging::level::INFO>(
+        "powerButtonShortPressedForResetHandler");
+    resetButtonPressLog();
+    sendPowerControlEvent(Event::resetButtonPressed);
+    addRestartCause(RestartCause::resetButton);
+}
+
+
 static void powerButtonHandler(bool state)
 {
     powerButtonIface->set_property("ButtonPressed", !state);
@@ -2027,19 +2135,30 @@ static void powerButtonHandler(bool state)
 
 static void resetButtonHandler(bool state)
 {
-    resetButtonIface->set_property("ButtonPressed", !state);
-    if (!state)
+    if (resetButtonConfig.type == ConfigType::DBUS_ONE_WAY_SIGNAL)
     {
+        resetButtonIface->set_property("ButtonPressed", true);
+        resetButtonIface->set_property("ButtonPressed", false);
         resetButtonPressLog();
-        if (!resetButtonMask)
-        {
-            sendPowerControlEvent(Event::resetButtonPressed);
-            addRestartCause(RestartCause::resetButton);
-        }
-        else
+        sendPowerControlEvent(Event::resetButtonPressed);
+        addRestartCause(RestartCause::resetButton);
+    }
+    else
+    {
+        resetButtonIface->set_property("ButtonPressed", !state);
+        if (!state)
         {
-            phosphor::logging::log<phosphor::logging::level::INFO>(
-                "reset button press masked");
+            resetButtonPressLog();
+            if (!resetButtonMask)
+            {
+                sendPowerControlEvent(Event::resetButtonPressed);
+                addRestartCause(RestartCause::resetButton);
+            }
+            else
+            {
+                phosphor::logging::log<phosphor::logging::level::INFO>(
+                    "reset button press masked");
+            }
         }
     }
 }
@@ -2085,33 +2204,40 @@ static void nmiSetEnableProperty(bool value)
 
 static void nmiReset(void)
 {
-    static constexpr const uint8_t value = 1;
-    const static constexpr int nmiOutPulseTimeMs = 200;
+    if (nmiOutConfig.type == ConfigType::GPIO)
+    {
+        static constexpr const uint8_t value = 1;
+        const static constexpr int nmiOutPulseTimeMs = 200;
 
-    phosphor::logging::log<phosphor::logging::level::INFO>("NMI out action");
-    nmiOutLine.set_value(value);
-    std::string logMsg =
-        nmiOutConfig.lineName + " set to " + std::to_string(value);
-    phosphor::logging::log<phosphor::logging::level::INFO>(logMsg.c_str());
-    gpioAssertTimer.expires_after(std::chrono::milliseconds(nmiOutPulseTimeMs));
-    gpioAssertTimer.async_wait([](const boost::system::error_code ec) {
-        // restore the NMI_OUT GPIO line back to the opposite value
-        nmiOutLine.set_value(!value);
-        std::string logMsg = nmiOutConfig.lineName + " released";
+        phosphor::logging::log<phosphor::logging::level::INFO>("NMI out action");
+        nmiOutLine.set_value(value);
+        std::string logMsg =
+            nmiOutConfig.lineName + " set to " + std::to_string(value);
         phosphor::logging::log<phosphor::logging::level::INFO>(logMsg.c_str());
-        if (ec)
-        {
-            // operation_aborted is expected if timer is canceled before
-            // completion.
-            if (ec != boost::asio::error::operation_aborted)
+        gpioAssertTimer.expires_after(std::chrono::milliseconds(nmiOutPulseTimeMs));
+        gpioAssertTimer.async_wait([](const boost::system::error_code ec) {
+            // restore the NMI_OUT GPIO line back to the opposite value
+            nmiOutLine.set_value(!value);
+            std::string logMsg = nmiOutConfig.lineName + " released";
+            phosphor::logging::log<phosphor::logging::level::INFO>(logMsg.c_str());
+            if (ec)
             {
-                std::string errMsg = nmiOutConfig.lineName +
-                                     " async_wait failed: " + ec.message();
-                phosphor::logging::log<phosphor::logging::level::ERR>(
-                    errMsg.c_str());
+                // operation_aborted is expected if timer is canceled before
+                // completion.
+                if (ec != boost::asio::error::operation_aborted)
+                {
+                    std::string errMsg = nmiOutConfig.lineName +
+                                        " async_wait failed: " + ec.message();
+                    phosphor::logging::log<phosphor::logging::level::ERR>(
+                        errMsg.c_str());
+                }
             }
-        }
-    });
+        });
+    }else if (nmiOutConfig.type == ConfigType::DBUS_METHOD)
+    {
+        dbusGPIOMethodCall(nmiOutConfig);
+    }
+
     // log to redfish
     nmiDiagIntLog();
     phosphor::logging::log<phosphor::logging::level::INFO>(
@@ -2207,7 +2333,13 @@ static void nmiButtonHandler(bool state)
 
 static void idButtonHandler(bool state)
 {
-    idButtonIface->set_property("ButtonPressed", !state);
+    if (idButtonConfig.type == ConfigType::DBUS_ONE_WAY_SIGNAL)
+    {
+        idButtonIface->set_property("ButtonPressed", true);
+        idButtonIface->set_property("ButtonPressed", false);
+    }
+    else
+        idButtonIface->set_property("ButtonPressed", !state);
 }
 
 static void pltRstHandler(bool pltRst)
@@ -2343,6 +2475,14 @@ static int loadConfigValues()
         {
             tempGpioData->type = ConfigType::DBUS;
         }
+        else if (signalType == "DBUS_ONE_WAY_SIGNAL")
+        {
+            tempGpioData->type = ConfigType::DBUS_ONE_WAY_SIGNAL;
+        }
+        else if (signalType == "DBUS_METHOD")
+        {
+            tempGpioData->type = ConfigType::DBUS_METHOD;
+        }
         else
         {
             std::string errMsg = "Undefined Type : " + signalType;
@@ -2481,11 +2621,26 @@ static sdbusplus::bus::match::match
         static_cast<sdbusplus::bus::bus&>(*conn),
         "type='signal',interface='org.freedesktop.DBus.Properties',member='"
         "PropertiesChanged',arg0='" +
-            cfg.dbusName + "'",
+            cfg.interface + "'",
         std::move(pulseEventMatcherCallback));
 }
 
-int getProperty(ConfigData& configData)
+static sdbusplus::bus::match::match
+    dbusOneWaySignalMatcher(const ConfigData& cfg, std::function<void(bool)> onMatch)
+{
+    auto pulseEventMatcherCallback =
+        [&cfg, onMatch](sdbusplus::message::message& msg) {
+            onMatch(false);
+        };
+
+    return sdbusplus::bus::match::match(
+        static_cast<sdbusplus::bus::bus&>(*conn),
+        "type='signal',interface='" + cfg.interface + "'," +
+        "member='" + cfg.lineName + "'",
+        std::move(pulseEventMatcherCallback));
+}
+
+bool getProperty(ConfigData& configData)
 {
     auto method = conn->new_method_call(
         configData.dbusName.c_str(), configData.path.c_str(),
@@ -2497,16 +2652,16 @@ int getProperty(ConfigData& configData)
     {
         phosphor::logging::log<phosphor::logging::level::ERR>(
             "Error reading from Bus");
-        return -1;
+        return false;
     }
-    std::variant<int> resp;
+    std::variant<bool> resp;
     reply.read(resp);
-    auto respValue = std::get_if<int>(&resp);
+    auto respValue = std::get_if<bool>(&resp);
     if (!respValue)
     {
         phosphor::logging::log<phosphor::logging::level::ERR>(
             "Error reading response");
-        return -1;
+        return false;
     }
     return (*respValue);
 }
@@ -2664,22 +2819,40 @@ int main(int argc, char* argv[])
         }
     }
 
-    // Request POWER_BUTTON GPIO events
-    if (powerButtonConfig.type == ConfigType::GPIO)
+    if (!powerButtonShortPressedForOnConfig.lineName.empty())
     {
-        if (!requestGPIOEvents(powerButtonConfig.lineName, powerButtonHandler,
-                               powerButtonLine, powerButtonEvent))
-        {
+        if (powerButtonLongPressedForOffConfig.lineName.empty())
             return -1;
-        }
+
+        if (powerButtonShortPressedForOnConfig.type != ConfigType::DBUS_ONE_WAY_SIGNAL
+            || powerButtonLongPressedForOffConfig.type != ConfigType::DBUS_ONE_WAY_SIGNAL)
+            return -1;
+        static sdbusplus::bus::match::match PBShortPressedForOntMonitor =
+                power_control::dbusOneWaySignalMatcher(powerButtonShortPressedForOnConfig,
+                                            powerButtonShortPressedForOnHandler);
+        static sdbusplus::bus::match::match PBLongPressedForOfftMonitor =
+                power_control::dbusOneWaySignalMatcher(powerButtonLongPressedForOffConfig,
+                                            powerButtonLongPressedForOffHandler);
     }
-    else if (powerButtonConfig.type == ConfigType::DBUS)
+    else
     {
-        static sdbusplus::bus::match::match powerButtonEventMonitor =
-            power_control::dbusGPIOMatcher(powerButtonConfig,
-                                           powerButtonHandler);
+        // Request POWER_BUTTON GPIO events
+        if (powerButtonConfig.type == ConfigType::GPIO)
+        {
+            if (!requestGPIOEvents(powerButtonConfig.lineName, powerButtonHandler,
+                                powerButtonLine, powerButtonEvent))
+            {
+                return -1;
+            }
+        }
+        else if (powerButtonConfig.type == ConfigType::DBUS)
+        {
+            static sdbusplus::bus::match::match powerButtonEventMonitor =
+                power_control::dbusGPIOMatcher(powerButtonConfig,
+                                            powerButtonHandler);
+        }
     }
-
+    
     // Request RESET_BUTTON GPIO events
     if (resetButtonConfig.type == ConfigType::GPIO)
     {
@@ -2695,6 +2868,12 @@ int main(int argc, char* argv[])
             power_control::dbusGPIOMatcher(resetButtonConfig,
                                            resetButtonHandler);
     }
+    else if (resetButtonConfig.type == ConfigType::DBUS_ONE_WAY_SIGNAL)
+    {
+        static sdbusplus::bus::match::match resetButtonEventMonitor =
+            power_control::dbusOneWaySignalMatcher(resetButtonConfig,
+                                           resetButtonHandler);
+    }
 
     // Request NMI_BUTTON GPIO events
     if (nmiButtonConfig.type == ConfigType::GPIO)
@@ -2725,6 +2904,12 @@ int main(int argc, char* argv[])
         static sdbusplus::bus::match::match idButtonEventMonitor =
             power_control::dbusGPIOMatcher(idButtonConfig, idButtonHandler);
     }
+    else if (idButtonConfig.type == ConfigType::DBUS_ONE_WAY_SIGNAL)
+    {
+        static sdbusplus::bus::match::match idButtonEventMonitor =
+            power_control::dbusOneWaySignalMatcher(idButtonConfig,
+                                           idButtonHandler);
+    }
 
 #ifdef USE_PLT_RST
     sdbusplus::bus::match::match pltRstMatch(
@@ -2757,44 +2942,51 @@ int main(int argc, char* argv[])
     }
 
     // initialize NMI_OUT GPIO.
-    if (!nmiOutConfig.lineName.empty())
+    if (!nmiOutConfig.lineName.empty() && nmiOutConfig.type != ConfigType::DBUS_METHOD)
     {
         setGPIOOutput(nmiOutConfig.lineName, 0, nmiOutLine);
     }
 
     // Initialize POWER_OUT and RESET_OUT GPIO.
     gpiod::line line;
-    if (!powerOutConfig.lineName.empty())
+    if (shortBtnPowerDownCtrlConfig.lineName.empty())
     {
-        if (!setGPIOOutput(powerOutConfig.lineName, !powerOutConfig.polarity,
-                           line))
+        if (!powerOutConfig.lineName.empty())
         {
+            if (!setGPIOOutput(powerOutConfig.lineName, !powerOutConfig.polarity,
+                            line))
+            {
+                return -1;
+            }
+        }
+        else
+        {
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "powerOut name should be configured from json config file");
             return -1;
         }
     }
-    else
-    {
-        phosphor::logging::log<phosphor::logging::level::ERR>(
-            "powerOut name should be configured from json config file");
-        return -1;
-    }
 
-    if (!resetOutConfig.lineName.empty())
+    if (resetCtrlConfig.lineName.empty())
     {
-        if (!setGPIOOutput(resetOutConfig.lineName, !resetOutConfig.polarity,
-                           line))
+        if (!resetOutConfig.lineName.empty())
+        {
+            if (!setGPIOOutput(resetOutConfig.lineName, !resetOutConfig.polarity,
+                            line))
+            {
+                return -1;
+            }
+        }
+        else
         {
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "ResetOut name should be configured from json config file");
             return -1;
         }
     }
-    else
-    {
-        phosphor::logging::log<phosphor::logging::level::ERR>(
-            "ResetOut name should be configured from json config file");
-        return -1;
-    }
     // Release line
-    line.reset();
+    if (line)
+        line.reset();
 
     // Initialize the power state
     powerState = PowerState::off;
@@ -2814,6 +3006,7 @@ int main(int argc, char* argv[])
             powerState = PowerState::on;
         }
     }
+
     // Initialize the power state storage
     if (initializePowerStateStorage() < 0)
     {
@@ -2823,7 +3016,7 @@ int main(int argc, char* argv[])
     // Check if we need to start the Power Restore policy
     powerRestorePolicyCheck();
 
-    if (nmiOutLine)
+    if (!nmiOutConfig.lineName.empty())
         nmiSourcePropertyMonitor();
 
     phosphor::logging::log<phosphor::logging::level::INFO>(
@@ -3118,7 +3311,8 @@ int main(int argc, char* argv[])
     sdbusplus::asio::object_server buttonsServer =
         sdbusplus::asio::object_server(conn);
 
-    if (!powerButtonConfig.lineName.empty())
+    if (!powerButtonConfig.lineName.empty()
+        || !powerButtonShortPressedForOnConfig.lineName.empty())
     {
         // Power Button Interface
         power_control::powerButtonIface = buttonsServer.add_interface(
@@ -3133,12 +3327,15 @@ int main(int argc, char* argv[])
                     {
                         return 1;
                     }
-                    if (!setGPIOOutput(powerOutConfig.lineName,
+                    if (shortBtnPowerDownCtrlConfig.lineName.empty())
+                    {
+                        if (!setGPIOOutput(powerOutConfig.lineName,
                                        !powerOutConfig.polarity,
                                        powerButtonMask))
-                    {
-                        throw std::runtime_error("Failed to request GPIO");
-                        return 0;
+                        {
+                            throw std::runtime_error("Failed to request GPIO");
+                            return 0;
+                        }
                     }
                     phosphor::logging::log<phosphor::logging::level::INFO>(
                         "Power Button Masked.");
@@ -3160,7 +3357,11 @@ int main(int argc, char* argv[])
 
         // Check power button state
         bool powerButtonPressed;
-        if (powerButtonConfig.type == ConfigType::GPIO)
+        if (!powerButtonShortPressedForOnConfig.lineName.empty())
+        {
+            powerButtonPressed = false;
+        }
+        else if (powerButtonConfig.type == ConfigType::GPIO)
         {
             powerButtonPressed = powerButtonLine.get_value() == 0;
         }
@@ -3191,13 +3392,17 @@ int main(int argc, char* argv[])
                     {
                         return 1;
                     }
-                    if (!setGPIOOutput(resetOutConfig.lineName,
+                    if (resetCtrlConfig.lineName.empty())
+                    {
+                        if (!setGPIOOutput(resetOutConfig.lineName,
                                        !resetOutConfig.polarity,
                                        resetButtonMask))
-                    {
-                        throw std::runtime_error("Failed to request GPIO");
-                        return 0;
+                        {
+                            throw std::runtime_error("Failed to request GPIO");
+                            return 0;
+                        }
                     }
+
                     phosphor::logging::log<phosphor::logging::level::INFO>(
                         "Reset Button Masked.");
                 }
@@ -3222,10 +3427,14 @@ int main(int argc, char* argv[])
         {
             resetButtonPressed = resetButtonLine.get_value() == 0;
         }
-        else
+        else if (resetButtonConfig.type == ConfigType::DBUS)
         {
             resetButtonPressed = getProperty(resetButtonConfig) == 0;
         }
+        else
+        {
+            resetButtonPressed = false;
+        }
 
         resetButtonIface->register_property("ButtonPressed",
                                             resetButtonPressed);
@@ -3233,7 +3442,7 @@ int main(int argc, char* argv[])
         resetButtonIface->initialize();
     }
 
-    if (nmiButtonLine)
+    if (!nmiButtonConfig.lineName.empty())
     {
         // NMI Button Interface
         nmiButtonIface = buttonsServer.add_interface(
@@ -3280,7 +3489,7 @@ int main(int argc, char* argv[])
         nmiButtonIface->initialize();
     }
 
-    if (nmiOutLine)
+    if (!nmiOutConfig.lineName.empty())
     {
         // NMI out Service
         sdbusplus::asio::object_server nmiOutServer =
@@ -3294,7 +3503,7 @@ int main(int argc, char* argv[])
         nmiOutIface->initialize();
     }
 
-    if (idButtonLine)
+    if (!idButtonConfig.lineName.empty())
     {
         // ID Button Interface
         idButtonIface = buttonsServer.add_interface(
@@ -3307,10 +3516,14 @@ int main(int argc, char* argv[])
         {
             idButtonPressed = idButtonLine.get_value() == 0;
         }
-        else
+        else if (idButtonConfig.type == ConfigType::DBUS)
         {
             idButtonPressed = getProperty(idButtonConfig) == 0;
         }
+        else
+        {
+            idButtonPressed = false;
+        }
 
         idButtonIface->register_property("ButtonPressed", idButtonPressed);
 
